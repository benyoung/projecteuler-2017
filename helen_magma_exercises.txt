/*Remember your semicolons!
 * ;
 * */

/* I can write a comment
 * with more than one line 
 * */

/*Exercise 1.1
YY:={2^n : n in {1..50}};
YY;

//Exercise 1.2
S:={x^2 + 3*x + 1: x in {0..1000} };
n:=1000^2 + 3*1000 + 1 div 5;
D:={5*i: i in {0..(n+1)} };
T:= S meet D ;
#T;

//Exercise 1.3 
Z := IntegerRing();
XX:={ 25*x - x^2 + x^3 -2*x^4: x in {-100..100} };
Maximum(XX);

//Exercise 1.4
A := [1..10];
B := [2*i: i in {0..5}];
C := SequenceToSet(A) diff SequenceToSet(B);
SetToSequence(C);


//Exercise 1.5
x:= -5;
//if method
if(x ge 0) then print(x^3);
else print((-x)^3); end if;

//select method
s:= (x ge 0) select x^3 else (-x)^3;
s;

//case method
case Sign(x):
when 1:
print(x^3);
when 0:
print(0);
when -1:
print((-x)^3);
end case;
* 


//Exercise 2.1
mylist := [4, 11, 24, 25, 30];
X := [1..49];
//Lotto Machine picks six winning numbers (no repeats)
winlist := [];
while (#winlist lt 6) do
a := Random(X);
bool := a in winlist;
if (bool eq false) then
winlist := Append(winlist, Random(X));
end if;
end while;
winlist;

count := 0;
for i in [1..#mylist] do
if (mylist[i] in winlist) then
count+:=1;
end if;
end for;

case count:
when 0:
"You lost!";
when 1:
"You lost!";
when 2:
"You lost!";
when 3:
"You won 10 pounds!";
when 4:
"You won 65 pounds!";
when 5: 
"You won 2000 pounds!";
when 6:
"JACKPOT!";
end case;


//Exercise 2.2
X:= [1..6];
wintotal := 0;
losetotal :=0;
for i in [1..10000] do
roll:= Random(X) + Random(X);
if (roll eq 7 or roll eq 11) then wintotal +:=1;
elif (roll eq 2 or roll eq 3 or roll eq 12) then losetotal +:=1;
else 
repeat roll2 := Random(X) + Random(X); until (roll2 eq roll or roll2 eq 7);
if (roll2 eq roll) then wintotal +:=1;
else losetotal +:=1;
end if;
end if;
end for;
print "wintotal:";
print wintotal;
print "losetotal:";
print losetotal;
* 
* 

//Exercise 2.3

function Lottery(a, b, c, d, e, f);
X := [1..49];
winlist := [];
while (#winlist lt 6) do
a := Random(X);
bool := a in winlist;
if (bool eq false) then
winlist := Append(winlist, a);
end if;
end while;
print "Winning Numbers:";
winlist;

count := 0;
for i in [1..#mylist] do
if (mylist[i] in winlist) then
count+:=1;
end if;
end for;

if (count le 2) then return 0;
elif (count eq 3) then return 10;
elif (count eq 4) then return 65;
elif (count eq 5) then return 2000;
else return "JACKPOT!";
end if;
end function;

function Craps();
roll:= Random(X) + Random(X);
if (roll eq 7 or roll eq 11) then return 1;
elif (roll eq 2 or roll eq 3 or roll eq 12) then return 0;
else 
repeat roll2 := Random(X) + Random(X); until (roll2 eq roll or roll2 eq 7);
if (roll2 eq roll) then return 1;
else return 0;
end if;
end if;
end function;



//Exercise 2.6

X:= [1..20];
X;
Z:=[];
for i in [1..20] do
Z:= Append(Z, IntegerToString(X[i]));
end for;
Z;

//Exercise 2.7

//Given a partition, produces a sequence of first column hook lengths
function FirstColumnHookLengths(X)

if(#X eq 0) then return X; end if;

if(not(IsPartition(X)) or X[#X] eq 0) then print "This is not a partition";
return [0];
end if;

l := [];
for i in [1..#X] do
l := Append(l, HookLength(X, i, 1));
end for;
return l;
end function;

//FirstColumnHookLengths([4, 4, 3, 2]);
//FirstColumnHookLengths([4, 5, 2]);
//FirstColumnHookLengths([]);



//Given a sequence of first column hook lengths, construct the corr partition
function UnderlyingPartition(l)
if(#l eq 0) then return l; end if;

for i in [1..#l-1] do if(l[i] - l[i+1] le 0) then
print "Not the first column hook lengths of a partition";
return [0];
end if;
end for;

X := [];
for i in [1..#l] do
X := Append(X, l[i] - #l + i);
end for;
return X;
end function;

//FirstColumnHookLengths([4,4,2]);
//UnderlyingPartition([6,5,2]);
//UnderlyingPartition([5,5,4]);

*/

/*

function findrimhook(P, t)
while P[#P] eq 0 do
P:= Prune(P);
end while;
s:=1;
i:=1;
Q:=P;
Q[#P]-:=1;
while (s lt t and i lt #P) do
s+:=P[#P - i] - P[#P - i +1] + 1;
Q[#P-i]-:= P[#P - i] - P[#P - i +1] + 1;
i+:=1;
end while;

if s eq t then return true, Q;
else return false, "none";
end if;

end function;

//findrimhook([1,0,0],2);

function findcore(P, t)
count:=0;
repeat
Pold:=P;
b, P:= findrimhook(P,t);
count+:=1;
until (b eq false);
return Pold, count-1;
end function;


//findcore([1,1,1], 2);


function rmvlst(n, t)
l:= [];
for i in [1..n] do l[i]:=0; end for;
LP:= Partitions(n);
for P in LP do
Q, count:= findcore(P, t);
l[count+1]:=l[count+1]+1;
end for;
return l;
end function;

rmvlst(6, 4);



//Exercise 3.1

//Was there a mistake in this exercise?

function recur(n)
if n eq 1 then return 1/2;
else return (recur(n-1) - recur(n-1)^2/(n-1));
end if;
end function;




//Exercise 3.2

function Delannoy(n)
if n eq -1 then return 1;
elif n eq 0 then return 1;
else return ( (3*(2*n-1)*Delannoy(n-1) - (n-1)*Delannoy(n-2) )/n );
end if;
end function;

Delannoy(20);
//260543813797441




//Exercise 3.3

function SelfConjugatePartitions(n)
LP:= Partitions(n);
C:=[];
for P in LP do
if ConjugatePartition(P) eq P then
Append(~C, P);
end if;
end for;
return C;
end function; 

//time #SelfConjugatePartitions(60);


//Exercise 3.4


function NextPartition(P)

W:=Weight(P);
I:=IndexOfPartition(P);
if I eq 0 then 
return Partitions(W+1)[#Partitions(W+1)];
else
return Partitions(W)[I];
end if;
end function;

//NextPartition([1,1]);

//This is much slower than just making the list:
function numberofSelfConjugatePartitions(n)
P:=Partitions(n)[#Partitions(n)];
count:= 0;
for i in [1..#Partitions(n)-1] do
if P eq ConjugatePartition(P) then
count:= count + 1;
end if;
P:=NextPartition(P);
end for;
return count;
end function;


//numberofSelfConjugatePartitions(30);


//Exercise 3.5
//come back to this

function multipartition(n, k)
MP:=[]
for i in range(n) do
LP:=Partitions(n);
for i in range(k) do
for P in LP do
l[1]:=P
Append(~MP, P


//Exercise 3.6

S:=Subsets({1, 2, 3, 4,5,6,7}, 2);
V:=Subsets(S);
IsoClasses:=[Graph<7|{1, 2}>];

for v in V do
G:=Graph<7|v>;
b:=true;

for i in [1..#IsoClasses] do

if IsIsomorphic(G,IsoClasses[i]) then
b:=false;
end if;
end for;

if b eq true then
Append(~IsoClasses,G);
end if;

end for;

#IsoClasses;
//11 isomorphism classes on 4 points
//This took too long for 7 points



//Exercise 3.7

conn:=0;
for i in [1..1000] do
G:=RandomGraph(5,0.6);
if IsConnected(G) then
conn+:=1;
end if;
end for;

print conn/1000;


//Exercise 3.8
Q:=Rationals();
R<x>:=PowerSeriesRing(Q, 40);
p:= (1-x - (1-6*x + x^2)^(1/2))/(2*x);

for i in [0..30] do
print Coefficient(p, i);
end for;


//Exercise 3.9
Z:=Integers();

function OddDistinctPartitions(n)
R<x>:=PowerSeriesRing(Z, n+1);
p:=1;
for i in [1..n] do
p:= p*(1+x^(2*i-1));
end for;
return Coefficient(p, n);
end function; 

//OddDistinctPartitions(8);
*/
/*
for i in [1..30] do
if not( #SelfConjugatePartitions(i) eq OddDistinctPartitions(i)) then
print i;
end if;
end for;
*/

//Exercise 4.1

/*
function LaurentPolynomialRing(F)
R<a, b>:=PolynomialRing(F, 2);
L<x,y>:=quo<R|a*b-1>;
return L;
end function;

L<x,y>:=LaurentPolynomialRing(Rationals());
x*y;


//Exercise 4.2

F<a>:=GF(4);
R<x>:=PolynomialRing(F);
count:= 0;
for i in [1..5] do
count+:= #AllIrreduciblePolynomials(F,i);
end for;
print count;
*/
//Exercise 4.3
/*Q:=Rationals();
R<x>:=PolynomialRing(Q);
f:=x^6+ 1;
K:=SplittingField(f);
GaloisGroup(K);
//IsIsomorphic(GaloisGroup(K),Alt(4));



//Exercise 4.4

Q:=Rationals();
R<x>:=PolynomialRing(Q);
l:=[];
for d in [2..20] do
if not IsSquare(d) then
f:=x^2 - d;
K:=SplittingField(f);
if IsUFD(K) then
Append(~l,d);
end if;
end if;
end for;

#l;
*/

//Exercise 4.6
/*
function LaurentPolynomialRing(F)
R<a, b, c, d>:=PolynomialRing(F, 4);
L<x,w,y,z>:=quo<R|a*b-1, c*d-1>;
return L;
end function;

L<x,w,y,z>:=LaurentPolynomialRing(Rationals());

M:= Matrix(L, [[x, x + w, y + x*y + z], [1, x*y^2 - y*x^2, x*z], [x^2 + w^2, 1/2, w*z-y^2] ]);
M;
Determinant(M);

//Exercise 4.7
Q:=Rationals();
X:=Matrix(Q,4, [4, -1, 0, -4, 1, 0, 3, 5, 3, 4, 1, 2, 4, 6, 8, 0]);


EchelonForm(X);
X^-1;

*/
//a:=X[1][1];
//if not a eq 0 then
//MultiplyRow(~X,1/a,1);
//end if;
//X;


/*
//Exercise 5.1
G:=AlternatingGroup(7);
X:=Subgroups(G:OrderMultipleOf:=14);
for i in X do
Y:=i`subgroup;
if (IsIsomorphic(Y, G) ) then b:= true;
elif IsIsomorphic(Y, PSL(2, 7)) then b:= true;
else b:= false;
end if;
print b;
end for;


//Exercise 5.2
G:=SymmetricGroup(6);
X:=Subgroups(G:IsNilpotent:=true);
#X;
//25



//Exercise 5.3


G:=SymmetricGroup(8);
i:=G!(1,3,2,4)(5,7,6,8);
j:=G!(1,5,2,6)(3,8,4,7);
k:=G!(1,7,2,8)(3,5,4,6);
Q:=sub<G|[i,j,k]>;

Z:=Center(Q);
K1:=DirectProduct(Z,Z);
DP1:=DirectProduct(Q,Q)/K1;

D:=DihedralGroup(4);

W:=Center(D);
K2:=DirectProduct(W,W);
DP2:=DirectProduct(D,D)/K2;
IsIsomorphic(DP1,DP2);


//Constructing Quaternions as a subgroup of SL(2,3):
//G:=SL(2, 3);
//X:=Subgroups(G:OrderEqual:=8);
//X;
//Q:=X[1]`subgroup;

//gen:= SetToSequence(Generators(Q));
//for i in [1..3] do
//print gen[i]*gen[i];
//end for;



//Exercise 5.4

G:=PSL(2,11);
S:=SylowSubgroup(G,2);
gen:=SetToSequence(Generators(S));
Class(G,G!gen[1]) meet Set(S);

IsConjugate(G,G!gen[1],G!gen[2]);
IsConjugate(G,G!gen[1],G!gen[1]*gen[2]);

//Exercise 5.5
H<a,b>:=Group<a,b|a^4, a^2 = b^2, a*b=b*a^-1>;
IsIsomorphic(PermutationGroup(H),Q);



//Exercise 5.6
count:= 0;
for i in [1..7] do
count+:= NumberOfSmallGroups(101^i);
end for;
count;
//32826299101

X:=SmallGroups(16, func<x|Exponent(x) eq 4> );
X;
Set(X[1]);
gen:=SetToSequence(Generators(X[1]));
//for i in gen do
//print Order(i);
//end for;
//Type(X[1]);
//#X;

*/

